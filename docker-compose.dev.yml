services:
  redis_claude_job_soccer:
    image: redis:7
    container_name: redis_claude_job_soccer_dev
    ports:
      - "6381:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  
  # ================== MONGODB SINGLE NODE WITH REPLICA SET (for transactions) ==================
  mongodb:
    image: mongo:7
    container_name: mongodb_dev
    ports:
      - "27017:27017"
    restart: always
    entrypoint: ["/mongo-entrypoint.sh"]
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--keyFile", "/data/mongodb-keyfile"]
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=claude_job_soccer_dev
    volumes:
      - mongodb_data:/data/db
      - ./mongo-keyfile:/tmp/mongodb-keyfile:ro
      - ./mongo-entrypoint.sh:/mongo-entrypoint.sh:ro
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  
  mongodb_setup:
    image: mongo:7
    container_name: mongodb_setup_dev
    depends_on:
      mongodb:
        condition: service_healthy
    command: >
      bash -c "
      echo 'Waiting 5 seconds for MongoDB to be ready...';
      sleep 5;
      mongosh --host mongodb:27017 -u admin -p admin123 --authenticationDatabase admin --eval \"
      try {
        const status = rs.status();
        print('âœ… Replica set already initialized: ' + status.set);
      } catch(err) {
        print('ðŸ”§ Initializing single-node replica set...');
        const result = rs.initiate({
          _id: 'rs0',
          members: [
            { _id: 0, host: 'mongodb:27017' }
          ]
        });
        print('Result: ' + JSON.stringify(result));
        print('âœ… Replica set initialized!');
        print('Waiting 5 seconds for election...');
        sleep(5000);
        const finalStatus = rs.status();
        print('Final status: ' + finalStatus.members[0].stateStr);
      }\"
      "
    restart: "no"
  claude_job_soccer-backend:
    build:
      context: ./claude_job_soccer_backend
      dockerfile: Dockerfile.dev
    container_name: claude_job_soccer-backend_dev
    ports:
      - "5013:5013"
    env_file:
      - ./claude_job_soccer_backend/.env.development
    volumes:
      - ./claude_job_soccer_backend:/app
      - node_modules:/app/node_modules    
      - ./logs:/logs
    depends_on:
      redis_claude_job_soccer:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: always
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MONGODB_URL=mongodb://admin:admin123@mongodb:27017/claude_job_soccer_dev?authSource=admin&replicaSet=rs0

  # Elasticsearch service
  elasticsearch:
    image: elasticsearch:7.9.2
    container_name: elasticsearch_claude_job_soccer_dev
    restart: always
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
      - "discovery.type=single-node"
    volumes:
      - elasticsearch_data_dev:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Kibana Service
  kibana:
    image: kibana:7.9.2
    container_name: kibana_claude_job_soccer_dev
    restart: always
    depends_on: 
      - elasticsearch 
    ports: 
      - "5601:5601"
    environment:
      - "ELASTICSEARCH_HOSTS=http://elasticsearch:9200" 


volumes:
  node_modules:
  elasticsearch_data_dev:
  mongodb_data:
